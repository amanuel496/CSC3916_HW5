{"version":3,"sources":["constants/actionTypes.js","actions/authActions.js","components/movieheader.js","actions/movieActions.js","components/movielist.js","components/moviedetail.js","actions/reviewActions.js","components/movie.js","components/login.js","components/register.js","components/authentication.js","reducers/authReducer.js","reducers/movieReducer.js","reducers/reviewReducer.js","stores/store.js","App.js","reportWebVitals.js","index.js"],"names":["Constants","USER_LOGGEDIN","USER_LOGOUT","FETCH_MOVIES","FETCH_MOVIE","SET_MOVIE","NEW_POST","submitLogin","data","runtimeEnv","dispatch","fetch","method","headers","Accept","body","JSON","stringify","mode","then","response","ok","Error","statusText","json","res","username","localStorage","setItem","token","type","actionTypes","catch","e","console","log","logoutUser","removeItem","MovieHeader","this","props","Navbar","expand","bg","variant","Brand","Toggle","aria-controls","Collapse","id","Nav","to","Link","disabled","loggedIn","selectedMovie","_id","onClick","logout","bind","Component","connect","state","auth","movie","setMovie","movieSet","fetchMovie","movieId","Authorization","getItem","fetchMovies","movies","Movielist","MovieList","handleClick","handleSelect","selectedIndex","MovieListCarousel","movieList","Carousel","onSelect","map","Item","Image","className","src","imageUrl","thumbnail","Caption","title","glyph","ratingAvg","yearReleased","MovieDetail","updateDetails","submit","details","rating","undefined","quote","nextProps","nextState","number","event","Object","assign","target","name","value","setState","eventKey","parseInt","postData","window","post","DetailInfo","Card","Header","Body","ListGroup","ListGroupItem","actors","actor","i","actorName","characterName","review","nameOfReviewer","Form","onSubmit","Group","controlId","Label","Control","onChange","as","rows","cols","Row","Dropdown","drop","Menu","Col","sm","span","offset","Button","Movie","useState","useParams","useDispatch","Login","login","password","placeholder","Register","register","Authentication","toggleReg","userNotLoggedIn","showLogin","showReg","userLoggedIn","initialState","authReducer","action","updated","constants","movieReducer","items","item","reviewReducer","middlewares","thunk","store","createStore","combineReducers","applyMiddleware","App","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb5effbf.chunk.js","sourcesContent":["const Constants = {\n    USER_LOGGEDIN: 'USER_LOGGEDIN',\n    USER_LOGOUT: 'USER_LOGOUT',\n    FETCH_MOVIES: 'FETCH_MOVIES',\n    FETCH_MOVIE: 'FETCH_MOVIE',\n    SET_MOVIE: 'SET_MOVIE',\n    NEW_POST: 'NEW_POST',\n}\n\nexport default Constants;","import actionTypes from '../constants/actionTypes';\nimport runtimeEnv from '@mars/heroku-js-runtime-env'\n\nfunction userLoggedIn(username) {\n    return {\n        type: actionTypes.USER_LOGGEDIN,\n        username: username\n    }\n}\n\nfunction logout() {\n    return {\n        type: actionTypes.USER_LOGOUT\n    }\n}\n\nexport function submitLogin(data) {\n    const env = runtimeEnv();\n    return dispatch => {\n        return fetch(`https://hw5-amanuel.herokuapp.com/users/signin`, {\n          method: \"POST\",\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(data),\n          mode: \"cors\",\n        })\n          .then((response) => {\n            if (!response.ok) {\n              throw Error(response.statusText);\n            }\n            return response.json();\n          })\n          .then((res) => {\n            localStorage.setItem(\"username\", data.username);\n            localStorage.setItem(\"token\", res.token);\n\n            dispatch(userLoggedIn(data.username));\n          })\n          .catch((e) => console.log(e));\n    }\n}\n\nexport function submitRegister(data) {\n    const env = runtimeEnv();\n    return dispatch => {\n        return fetch(`https://hw5-amanuel.herokuapp.com/users/signup`, {\n          method: \"POST\",\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(data),\n          mode: \"cors\",\n        })\n          .then((response) => {\n            if (!response.ok) {\n              throw Error(response.statusText);\n            }\n            return response.json();\n          })\n          .then((res) => {\n            dispatch(submitLogin(data));\n          })\n          .catch((e) => console.log(e));\n    }\n}\n\nexport function logoutUser() {\n    return dispatch => {\n        localStorage.removeItem('username');\n        localStorage.removeItem('token');\n        dispatch(logout())\n    }\n}","import React, { Component } from 'react';\nimport {Navbar, Nav} from 'react-bootstrap';\nimport {LinkContainer} from 'react-router-bootstrap';\nimport {connect} from 'react-redux';\nimport {logoutUser} from \"../actions/authActions\";\n\nclass MovieHeader extends Component {\n    logout() {\n        this.props.dispatch(logoutUser());\n    }\n\n    render() {\n        return (\n            <div>\n                <Navbar expand=\"lg\" bg=\"dark\" variant=\"dark\">\n                    <Navbar.Brand>\n                        Movie App\n                    </Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav>\n                            <LinkContainer to=\"/movielist\">\n                                <Nav.Link disabled={!this.props.loggedIn}>Movie List</Nav.Link>\n                            </LinkContainer>\n                            <LinkContainer to={'/movie/' + (this.props.selectedMovie ? this.props.selectedMovie._id : '')}>\n                                <Nav.Link disabled={!this.props.loggedIn}>Movie Detail</Nav.Link>\n                            </LinkContainer>\n                            <LinkContainer to=\"/signin\">\n                                <Nav.Link>{this.props.loggedIn ? <button onClick={this.logout.bind(this)}>Logout</button> : 'Login'}</Nav.Link>\n                            </LinkContainer>\n                    </Nav>\n                    </Navbar.Collapse>\n                </Navbar>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loggedIn : state.auth.loggedIn,\n        username : state.auth.username,\n        selectedMovie: state.movie.selectedMovie\n    }\n}\n\nexport default connect(mapStateToProps)(MovieHeader);","import actionTypes from '../constants/actionTypes';\nimport runtimeEnv from '@mars/heroku-js-runtime-env'\n\n\nfunction moviesFetched(movies) {\n    movies = movies.Movielist;\n    console.log(movies);\n    return {\n        type: actionTypes.FETCH_MOVIES,\n        movies: movies\n    }\n}\n\nfunction movieFetched(movie) {\n    return {\n        type: actionTypes.FETCH_MOVIE,\n        selectedMovie: movie\n    }\n}\n\nfunction movieSet(movie) {\n    return {\n        type: actionTypes.SET_MOVIE,\n        selectedMovie: movie\n    }\n}\n\nexport function setMovie(movie) {\n    return dispatch => {\n        dispatch(movieSet(movie));\n    }\n}\n\nexport function fetchMovie(movieId) {\n    const env = runtimeEnv();\n    return dispatch => {\n        return fetch(\n          `{https://hw5-amanuel.herokuapp.com/movies/${movieId}?review=true`,\n          {\n            method: \"GET\",\n            headers: {\n              Accept: \"application/json\",\n              \"Content-Type\": \"application/json\",\n              Authorization: `JWT ${localStorage.getItem(\"token\")}`,\n            },\n            mode: \"cors\",\n          }\n        )\n          .then((response) => {\n            if (!response.ok) {\n              throw Error(response.statusText);\n            }\n            return response.json();\n          })\n          .then((res) => {\n            dispatch(movieFetched(res));\n          })\n          .catch((e) => console.log(e));\n    }\n}\n\nexport function fetchMovies() {\n    const env = runtimeEnv();\n    return dispatch => {\n        return fetch(`https://hw5-amanuel.herokuapp.com/movies?review=true`, {\n          method: \"GET\",\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `JWT ${localStorage.getItem(\"token\")}`,\n          },\n          mode: \"cors\",\n        })\n          .then((response) => {\n            if (!response.ok) {\n              throw Error(response.statusText);\n            }\n            return response.json();\n          })\n          .then((res) => {\n            // console.log(localStorage.getItem(\"token\"));\n            // window.alert(\"way to go\");\n            dispatch(moviesFetched(res));\n          })\n          .catch((e) => console.log(e));\n    }\n}\n\n// export const createPost = (postData,movieId) => (dispatch) => {\n//   const env = runtimeEnv();\n//   postData.movie = movieId;\n//   console.log(postData)\n//   fetch(`${env.REACT_APP_MOVIE_API_URL}/reviews`, {\n//     method: \"POST\",\n//     headers: {\n//       \"content-type\": \"application/json\",\n//       Authorization: localStorage.getItem(\"token\"),\n//     },\n//     // mode: \"cors\",\n//     body: JSON.stringify(postData),\n//   })\n//     .then((res) => {res.json()\n//     console.warn(\"hi hi hi hi hi hi hi\", res.body)\n//     }    \n//     )\n//     .then((post) =>\n//       // dispatch({\n//       //   type: actionTypes.NEW_POST,\n//       //   payload: post,\n//       // })\n//       dispatch(fetchMovie(movieId))\n//     );\n// };\n","import React, { Component } from 'react';\nimport { fetchMovies } from \"../actions/movieActions\";\nimport { setMovie } from \"../actions/movieActions\";\nimport {connect} from 'react-redux';\nimport {Image, Nav} from 'react-bootstrap';\nimport { Carousel } from 'react-bootstrap';\nimport { BsStarFill} from 'react-icons/bs'\nimport {LinkContainer} from 'react-router-bootstrap';\n\nclass MovieList extends Component {\n    constructor(props) {\n        super(props);\n        this.handleSelect = this.handleSelect.bind(this);\n\n        //  this.formatYear = (yearFromDatabase) => {\n        //    let year = new Date(yearFromDatabase);\n\n        //    return year.getFullYear().toLocaleString();\n        //  };\n    }\n\n    componentDidMount() {\n        const {dispatch} = this.props;\n        dispatch(fetchMovies());\n    }\n\n\n\n    handleSelect(selectedIndex, e) {\n        const {dispatch} = this.props;\n        dispatch(setMovie(this.props.movies[selectedIndex]));\n    }\n\n    handleClick = (movie) => {\n        const {dispatch} = this.props;\n        dispatch(setMovie(movie));\n    }\n\n    render() {\n        const MovieListCarousel = ({movieList}) => {\n            if (!movieList) {\n                return <div>Loading....</div>\n            }\n\n            return (\n              <Carousel onSelect={this.handleSelect}>\n                {movieList.map((movie) => (\n                  <Carousel.Item key={movie._id}>\n                    <div>\n                      <LinkContainer\n                        to={\"/movie/\" + movie._id}\n                        onClick={() => this.handleClick(movie)}\n                      >\n                        <Nav.Link>\n                          <Image\n                            className=\"image\"\n                            src={movie.imageUrl}\n                            thumbnail\n                          />\n                        </Nav.Link>\n                        {/* {console.log(movie.imageUrl)} */}\n                      </LinkContainer>\n                    </div>\n                    <Carousel.Caption>\n                      <h3>{movie.title}</h3>\n                      <BsStarFill glyph={\"star\"} /> {movie.ratingAvg}{\" \"}\n                      &nbsp;&nbsp; {movie.yearReleased}\n                    </Carousel.Caption>\n                  </Carousel.Item>\n                ))}\n              </Carousel>\n            );\n        }\n\n        return (\n            <MovieListCarousel movieList={this.props.movies} />\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        movies: state.movie.movies\n    }\n}\n\nexport default connect(mapStateToProps)(MovieList);\n\n","import React, { Component } from 'react';\nimport { fetchMovie} from \"../actions/movieActions\";\nimport {connect} from 'react-redux';\nimport {Card, ListGroup, ListGroupItem, Dropdown, Form, Row, Col, Button, FormText } from 'react-bootstrap';\nimport { BsStarFill } from 'react-icons/bs'\nimport { Image } from 'react-bootstrap';\nimport { createPost } from '../actions/reviewActions';\n\nclass MovieDetail extends Component {\n  constructor(props) {\n    super(props);\n    this.updateDetails = this.updateDetails.bind(this);\n    this.submit = this.submit.bind(this);\n    this.handleSelect = this.handleSelect.bind(this);\n\n    this.state = {\n      details: {\n        rating: undefined,\n        quote: undefined,\n      },\n    };\n  }\n  componentDidMount() {\n    const { dispatch } = this.props;\n    if (this.props.selectedMovie == undefined) {\n      dispatch(fetchMovie(this.props.movieId));\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.props.number === nextProps.number) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  // componentDidUpdate() {\n  //   const { dispatch } = this.props;\n  //   if (this.props.selectedMovie == null) {\n  //     dispatch(fetchMovie(this.props.movieId));\n  //   }\n  // }\n  // componentWillReceiveProps() {\n  //   const { dispatch } = this.props;\n  //   if (this.props.selectedMovie == null) {\n  //     window.alert(\"hi there\")\n  //     dispatch(fetchMovie(this.props.movieId));\n  //   }\n  // }\n  updateDetails(event) {\n    // event.preventDefault();\n    let updateDetails = Object.assign({}, this.state.details);\n\n    updateDetails[event.target.name] = event.target.value;\n    this.setState({\n      details: updateDetails,\n    });\n  }\n\n  handleSelect(eventKey) {\n    let updateDetails = Object.assign({}, this.state.details);\n    updateDetails[\"rating\"] = parseInt(eventKey);\n    this.setState({\n      details: updateDetails,\n    });\n    console.log(this.state.details);\n  }\n\n  submit() {\n    const { dispatch } = this.props;\n    // this.state.details.movie = movieId;\n    dispatch(createPost(this.state.details, this.props.movieId));\n  }\n  render() {\n    const DetailInfo = () => {\n      if (!this.props.selectedMovie) {\n        return <div>Loading....</div>;\n      }\n\n      return (\n        <Card>\n          <Card.Header>Movie Detail</Card.Header>\n          <Card.Body>\n            <Image\n              className=\"image\"\n              src={this.props.selectedMovie.imageUrl}\n              thumbnail\n            />\n          </Card.Body>\n          <ListGroup>\n            <ListGroupItem>{this.props.selectedMovie.title}</ListGroupItem>\n            <ListGroupItem>\n              {this.props.selectedMovie.actors.map((actor, i) => (\n                <p key={i}>\n                  <b>{actor.actorName}</b> {actor.characterName}\n                </p>\n              ))}\n            </ListGroupItem>\n            <ListGroupItem>\n              <h4>\n                <BsStarFill /> {this.props.selectedMovie.ratingAvg}\n              </h4>\n            </ListGroupItem>\n          </ListGroup>\n          <Card.Body>\n            {this.props.selectedMovie.review.map((review, i) => (\n              <p key={i}>\n                <b>{review.nameOfReviewer}</b>&nbsp; {review.quote}\n                &nbsp; <BsStarFill /> {review.rating}\n              </p>\n            ))}\n          </Card.Body>\n\n          <Card.Body>\n            <Form className=\"review-form\" onSubmit={this.submit}>\n              {/* <Form.Group as={Row} controlId=\"formHorizontalPassword\"> */}\n              <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                <Form.Label>Comment</Form.Label>\n                <Form.Control\n                id=\"text-field\"\n                  name=\"quote\"\n                  onChange={this.updateDetails}\n                  value={this.state.details.quote}\n                  // eventKey=\"quote\"\n                  as=\"textarea\"\n                  rows={2}\n                  cols={1}\n                />\n                {/* </Form.Group> */}\n              </Form.Group>\n              <fieldset>\n                <Form.Group as={Row}>\n                  <Dropdown className=\"rating-btn\"\n                  drop=\"up\"\n                    onSelect={this.handleSelect}\n                    // onChange={this.updateDetails}\n                    value={this.state.details.rating}\n                  >\n                    <Dropdown.Toggle variant=\"Secondary\" id=\"dropdown-basic\">\n                      Rating\n                    </Dropdown.Toggle>\n\n                    <Dropdown.Menu>\n                      <Dropdown.Item eventKey=\"1\">1</Dropdown.Item>\n                      <Dropdown.Item eventKey=\"2\">2</Dropdown.Item>\n                      <Dropdown.Item eventKey=\"3\">3</Dropdown.Item>\n                      <Dropdown.Item eventKey=\"4\">4</Dropdown.Item>\n                      <Dropdown.Item eventKey=\"5\">5</Dropdown.Item>\n                    </Dropdown.Menu>\n                  </Dropdown>\n                </Form.Group>\n              </fieldset>\n\n              <Form.Group as={Row}>\n                <Col sm={{ span: 1, offset: 0 }}>\n                  <Button className=\"submit-btn\" type=\"submit\" onSubmit={this.submit}>\n                    Submit\n                  </Button>\n                </Col>\n              </Form.Group>\n            </Form>\n          </Card.Body>\n        </Card>\n      );\n    };\n\n    return <DetailInfo />;\n  }\n}\n\nconst mapStateToProps = state => {\n    return {\n        selectedMovie: state.movie.selectedMovie\n    }\n}\n\nexport default connect(mapStateToProps)(MovieDetail);\n\n","import actionTypes from \"../constants/actionTypes\";\r\nimport runtimeEnv from \"@mars/heroku-js-runtime-env\";\r\n// import {fetchMovie} from \"./movieActions\";\r\n\r\nexport const createPost = (postData, movieId) => (dispatch) => {\r\n  const env = runtimeEnv();\r\n  const token = window.localStorage.getItem(\"token\");\r\n  postData.movie = movieId;\r\n  console.log(postData);\r\n//   window.alert(\"way to go\")\r\n  fetch(`https://hw4-amanuel.herokuapp.com/reviews`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      //   Accept: \"application/json\",\r\n      \"content-type\": \"application/json\",\r\n      Authorization: `JWT ${localStorage.getItem(\"token\")}`,\r\n      //   Authorization: window.localStorage.getItem(\"token\"),\r\n    },\r\n    mode: \"cors\",\r\n    body: JSON.stringify(postData),\r\n  })\r\n    .then((response) => {\r\n      if (!response.ok) {\r\n        // console.log(\"in the throw error\");\r\n        // console.log(postData);\r\n        // window.alert(\"way to go\");\r\n        // console.log(response.statusText);\r\n        // console.log(localStorage.getItem(\"token\"));\r\n        // window.alert(\"way to go11\");\r\n        throw Error(response.statusText);\r\n        // window.alert(\"way to go\");\r\n      }\r\n      //   window.alert(\"way to go00\");\r\n      return response.json();\r\n    })\r\n    // .then((res) => {\r\n    //   res.json();\r\n    //   console.warn(\"hi hi hi hi hi hi hi\", res.body);\r\n    // })\r\n    .then((post) =>\r\n      dispatch({\r\n        type: actionTypes.NEW_POST,\r\n        // payload: post,\r\n        movieId,\r\n      })\r\n    );\r\n};\r\n\r\n// export const fetchPosts = () => (dispatch) => {\r\n//   fetch(\"https://jsonplaceholder.typicode.com/posts\")\r\n//     .then((res) => res.json())\r\n//     .then((posts) =>\r\n//       dispatch({\r\n//         type: FETCH_POSTS,\r\n//         payload: posts,\r\n//       })\r\n//     );\r\n// };\r\n\r\n// export const createPost = (postData) => (dispatch) => {\r\n//     const env = runtimeEnv();\r\n//   fetch( `${env.REACT_APP_MOVIE_API_URL}/reviews`, {\r\n//     method: \"POST\",\r\n//     headers: {\r\n//       \"content-type\": \"application/json\",\r\n//     },\r\n//     body: JSON.stringify(postData),\r\n//   })\r\n//     .then((res) => res.json())\r\n//     .then((post) =>\r\n//       dispatch({\r\n//         type: actionTypes.NEW_POST,\r\n//         payload: post,\r\n//       })\r\n//     );\r\n// };\r\n","import React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch } from 'react-redux'\nimport { fetchMovie } from \"../actions/movieActions\";\nimport MovieDetail from \"../components/moviedetail\"\n\n// support routing\n\nfunction Movie(props) {\n    const [selectedMovie] = useState(props.selectedMovie);\n    const params = useParams();\n    const movieId = params.movieId;\n    console.log(movieId);\n    const dispatch = useDispatch();\n    if (selectedMovie == null) {\n        dispatch(fetchMovie(movieId));\n    }\n\n    return (<MovieDetail movieId={movieId} />)\n}\n\nexport default Movie;","import React, { Component } from 'react';\nimport { submitLogin } from '../actions/authActions';\nimport { connect } from 'react-redux';\nimport { Form, Button } from 'react-bootstrap';\n\nclass Login extends Component {\n\n    constructor(props) {\n        super(props);\n        this.updateDetails = this.updateDetails.bind(this);\n        this.login = this.login.bind(this);\n\n        this.state = {\n            details:{\n                username: '',\n                password: ''\n            }\n        };\n    }\n\n    updateDetails(event){\n        let updateDetails = Object.assign({}, this.state.details);\n\n        updateDetails[event.target.id] = event.target.value;\n        this.setState({\n            details: updateDetails\n        });\n    }\n\n    login() {\n        const {dispatch} = this.props;\n        dispatch(submitLogin(this.state.details));\n    }\n\n    render(){\n        return (\n            <Form className='form-horizontal'>\n                <Form.Group controlId=\"username\">\n                    <Form.Label>Email</Form.Label>\n                    <Form.Control onChange={this.updateDetails} value={this.state.details.username} type=\"email\" placeholder=\"Enter email\" />\n                </Form.Group>\n\n                <Form.Group controlId=\"password\">\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control onChange={this.updateDetails} value={this.state.details.password}  type=\"password\" placeholder=\"Password\" />\n                </Form.Group>\n                <Button onClick={this.login}>Sign in</Button>\n            </Form>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n    }\n}\n\nexport default connect(mapStateToProps)(Login);","import React, { Component} from 'react';\nimport { submitRegister } from '../actions/authActions';\nimport { connect } from 'react-redux';\nimport { Form, Button } from 'react-bootstrap';\n\nclass Register extends Component {\n\n    constructor(props){\n        super(props);\n\n        this.updateDetails = this.updateDetails.bind(this);\n        this.register = this.register.bind(this);\n        this.state = {\n            details:{\n                name: '',\n                username: '',\n                password: ''\n            }\n        };\n    }\n\n    updateDetails(event){\n        let updateDetails = Object.assign({}, this.state.details);\n\n        updateDetails[event.target.id] = event.target.value;\n        this.setState({\n            details: updateDetails\n        });\n    }\n\n    register(){\n        const {dispatch} = this.props;\n        dispatch(submitRegister(this.state.details));\n    }\n\n    render(){\n        return (\n            <Form className='form-horizontal'>\n                <Form.Group controlId=\"name\">\n                    <Form.Label>Name</Form.Label>\n                    <Form.Control onChange={this.updateDetails} value={this.state.details.name} type=\"text\" placeholder=\"Name\" />\n                </Form.Group>\n\n                <Form.Group controlId=\"username\">\n                    <Form.Label>Email</Form.Label>\n                    <Form.Control onChange={this.updateDetails} value={this.state.details.username} type=\"email\" placeholder=\"Enter email\" />\n                </Form.Group>\n\n                <Form.Group controlId=\"password\">\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control onChange={this.updateDetails} value={this.state.details.password}  type=\"password\" placeholder=\"Password\" />\n                </Form.Group>\n                <Button onClick={this.register}>Register</Button>\n            </Form>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n    }\n}\n\nexport default connect(mapStateToProps)(Register);","import React, { Component} from 'react';\nimport { connect } from 'react-redux'\nimport Login from './login';\nimport Register from './register';\nimport { logoutUser } from '../actions/authActions';\n\nclass Authentication extends Component {\n\n    constructor(){\n        super();\n\n        this.state = {\n            toggleReg: false\n        };\n    }\n\n    componentDidMount(){\n\n    }\n\n    showLogin(){\n        this.setState({\n            toggleReg: false\n        });\n    }\n\n    showReg(){\n        this.setState({\n            toggleReg: true\n        });\n    }\n\n    logout(){\n        this.props.dispatch(logoutUser());\n    }\n\n    render(){\n\n        const userNotLoggedIn = (\n            <div>\n                <button onClick={this.showLogin.bind(this)}>Login</button><button onClick={this.showReg.bind(this)}>Register</button>\n                { this.state.toggleReg ? <Register /> : <Login /> }\n            </div>\n        );\n        const userLoggedIn = (<div>Logged in as: {this.props.username} <button onClick={this.logout.bind(this)}>Logout</button></div>);\n\n        return (\n            <div>\n                {this.props.loggedIn ? userLoggedIn : userNotLoggedIn}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loggedIn: state.auth.loggedIn,\n        username: state.auth.username\n    }\n}\n\nexport default connect(mapStateToProps)(Authentication)","import constants from '../constants/actionTypes'\n\nlet initialState = {\n    loggedIn: localStorage.getItem('token') ? true : false,\n    username: localStorage.getItem('username') ? localStorage.getItem('username') : ''\n}\n\nconst authReducer = (state = initialState, action) => {\n\n    var updated = Object.assign({}, state);\n\n    switch (action.type) {\n        case constants.USER_LOGGEDIN:\n            updated['loggedIn'] = true;\n            updated['username'] = action.username;\n            return updated;\n\n        case constants.USER_LOGOUT:\n            updated['loggedIn'] = false;\n            updated['username'] = '';\n            return updated;\n\n        default:\n            return state;\n    }\n}\n\nexport default authReducer","import constants from '../constants/actionTypes'\n\nlet initialState = {\n      movies: [],\n      selectedMovie: null\n}\n\nconst movieReducer = (state = initialState, action) => {\n      let updated = Object.assign({}, state);\n\n      switch(action.type) {\n            case constants.FETCH_MOVIES:\n                  updated['movies'] = action.movies;\n                  updated['selectedMovie'] = action.movies[0];\n                  return updated;\n            case constants.SET_MOVIE:\n                  updated['selectedMovie'] = action.selectedMovie;\n                  return updated;\n            case constants.FETCH_MOVIE:\n                  updated['selectedMovie'] = action.selectedMovie;\n                  return updated;\n            default:\n                  return state;\n      }\n}\n\nexport default movieReducer;","import constants from \"../constants/actionTypes\";\r\n\r\nimport { fetchMovie } from \"../actions/movieActions\"\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst initialState = {\r\n  items: [],\r\n  item: {},\r\n};\r\n\r\n// export default function (state = initialState, action) {\r\n//   switch (action.type) {\r\n//     case FETCH_POSTS:\r\n//       return {\r\n//         ...state,\r\n//         items: action.payload,\r\n//       };\r\n//     case NEW_POST:\r\n//       return {\r\n//         ...state,\r\n//         item: action.payload,\r\n//       };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// }\r\n\r\n const reviewReducer = (state = initialState, action) => {\r\n        // const dispatch = useDispatch();\r\n   const movieId = action.movieId;\r\n  let updated = Object.assign({}, state);\r\n\r\n  switch (action.type) {\r\n    // case constants.FETCH_MOVIES:\r\n    //   updated[\"movies\"] = action.movies;\r\n    //   updated[\"selectedMovie\"] = action.movies[0];\r\n    //   return updated;\r\n    // case constants.SET_MOVIE:\r\n    //   updated[\"selectedMovie\"] = action.selectedMovie;\r\n    //   return updated;\r\n    case constants.NEW_POST:\r\n        return state;\r\n//         {\r\n//             console.warn(\"fetching\");\r\n// fetchMovie(movieId);\r\n//         }\r\n      \r\n        // ...state,\r\n        // item: action.payload,\r\n        \r\n        // dispatch(fetchMovie(movieId= action.movieId));\r\n        \r\n    //   };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default reviewReducer;\r\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport authReducer from \"../reducers/authReducer\";\nimport movieReducer from \"../reducers/movieReducer\";\nimport reviewReducer from '../reducers/reviewReducer';\nconst middlewares = [thunk];\n\nif (process.env.NODE_ENV === 'development') {\n    const { logger } = require('redux-logger');\n\n    middlewares.push(logger);\n}\n\nconst store = createStore(\n    combineReducers( {\n        auth: authReducer,\n        movie: movieReducer,\n        review: reviewReducer\n    }),\n    applyMiddleware(\n        ...middlewares\n    )\n);\n\nexport default store;","import React from 'react';\nimport './App.css';\nimport MovieHeader from './components/movieheader';\nimport MovieList from './components/movielist';\nimport Movie from './components/movie';\nimport Authentication from './components/authentication';\nimport {HashRouter, Route} from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './stores/store';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <HashRouter>\n          <div>\n            <MovieHeader />\n            <Route exact path=\"/\" render={()=><MovieList />}/>\n            <Route exact path=\"/movielist\" render={()=><MovieList />}/>\n            <Route exact path=\"/movie/:movieId\" render={()=><Movie />}/>\n            <Route path=\"/signin\" render={()=><Authentication />}/>\n          </div>\n        </HashRouter>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}